package com.social.manager.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	
	
   @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/","/about","/login","/register").permitAll()
                .antMatchers("/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login")
                .defaultSuccessUrl( "/home" )
                .failureUrl( "/login?error" )
                .usernameParameter( "username" )
                .passwordParameter( "password" )
                .and()
                .rememberMe()
                .and()
                .csrf()
                .disable()
            .logout()
            	.logoutRequestMatcher( new AntPathRequestMatcher( "/logout" ) )
            	.logoutSuccessUrl( "/login?logout" )
            	.deleteCookies( "JSESSIONID" )
            	.invalidateHttpSession( true );
        		/*.and()
        		.sessionManagement()
        		.invalidSessionUrl( "/lockscreen" )
        		.maximumSessions( 1 );*/
        		
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
	        //.jdbcAuthentication()
			//.dataSource(dataSource)
			//.withDefaultSchema()
        	.inMemoryAuthentication()
			.withUser("user").password("user").roles("USER").and()
			.withUser("admin").password("password").roles("USER", "ADMIN");
    }
    
   @Override
    public void configure(WebSecurity web) throws Exception {
      web
        .ignoring()
           .antMatchers("/resources/**","/css/**","/js/**","/images/**","/webjars/**");
    }
}
